import{_ as e,c as s,o as n,b as a}from"./app-BrWBrMkU.js";const t={},l=a(`<h1 id="typescript-style-guide-and-coding-conventions" tabindex="-1"><a class="header-anchor" href="#typescript-style-guide-and-coding-conventions"><span>TypeScript Style Guide and Coding Conventions</span></a></h1><blockquote><p><a href="https://github.com/basarat/typescript-book/blob/master/docs/styleguide/styleguide.md" target="_blank" rel="noopener noreferrer"><code>Source: Typescript Book - Style Guide</code></a></p></blockquote><p>Key Sections:</p><ul><li><a href="#variable-and-function">Variable</a></li><li><a href="#class">Class</a></li><li><a href="#interface">Interface</a></li><li><a href="#type">Type</a></li><li><a href="#namespace">Namespace</a></li><li><a href="#enum">Enum</a></li><li><a href="#null-vs-undefined"><code>null</code> vs. <code>undefined</code></a></li><li><a href="#formatting">Formatting</a></li><li><a href="#quotes">Single vs. Double Quotes</a></li><li><a href="#spaces">Tabs vs. Spaces</a></li><li><a href="#semicolons">Use semicolons</a></li><li><a href="#array">Annotate Arrays as <code>Type[]</code></a></li><li><a href="#filename">File Names</a></li><li><a href="#type-vs-interface"><code>type</code> vs <code>interface</code></a></li><li><a href="#-or-"><code>==</code> or <code>===</code></a></li></ul><h2 id="variable-and-function" tabindex="-1"><a class="header-anchor" href="#variable-and-function"><span>Variable and Function</span></a></h2><ul><li>Use <code>camelCase</code> for variable and function names</li></ul><blockquote><p>Reason: Conventional JavaScript</p></blockquote><p><strong>Bad</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">var</span> FooVar<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">BarFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Good</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">var</span> fooVar<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">barFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="class" tabindex="-1"><a class="header-anchor" href="#class"><span>Class</span></a></h2><ul><li>Use <code>PascalCase</code> for class names.</li></ul><blockquote><p>Reason: This is actually fairly conventional in standard JavaScript.</p></blockquote><p><strong>Bad</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">foo</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>Good</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>Use <code>camelCase</code> of class members and methods</li></ul><blockquote><p>Reason: Naturally follows from variable and function naming convention.</p></blockquote><p><strong>Bad</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span></span>
<span class="line">    Bar<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">Baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Good</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span></span>
<span class="line">    bar<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="interface" tabindex="-1"><a class="header-anchor" href="#interface"><span>Interface</span></a></h2><ul><li>Use <code>PascalCase</code> for name.</li></ul><blockquote><p>Reason: Similar to class</p></blockquote><ul><li>Use <code>camelCase</code> for members.</li></ul><blockquote><p>Reason: Similar to class</p></blockquote><ul><li><strong>Don&#39;t</strong> prefix with <code>I</code></li></ul><blockquote><p>Reason: Unconventional. <code>lib.d.ts</code> defines important interfaces without an <code>I</code> (e.g. Window, Document etc).</p></blockquote><p><strong>Bad</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">IFoo</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Good</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="type" tabindex="-1"><a class="header-anchor" href="#type"><span>Type</span></a></h2><ul><li>Use <code>PascalCase</code> for name.</li></ul><blockquote><p>Reason: Similar to class</p></blockquote><ul><li>Use <code>camelCase</code> for members.</li></ul><blockquote><p>Reason: Similar to class</p></blockquote><h2 id="namespace" tabindex="-1"><a class="header-anchor" href="#namespace"><span>Namespace</span></a></h2><ul><li>Use <code>PascalCase</code> for names</li></ul><blockquote><p>Reason: Convention followed by the TypeScript team. Namespaces are effectively just a class with static members. Class names are <code>PascalCase</code> =&gt; Namespace names are <code>PascalCase</code></p></blockquote><p><strong>Bad</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">namespace</span> foo <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Good</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">namespace</span> Foo <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="enum" tabindex="-1"><a class="header-anchor" href="#enum"><span>Enum</span></a></h2><ul><li>Use <code>PascalCase</code> for enum names</li></ul><blockquote><p>Reason: Similar to Class. Is a Type.</p></blockquote><p><strong>Bad</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">enum</span> color <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Good</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Use <code>PascalCase</code> for enum member</li></ul><blockquote><p>Reason: Convention followed by TypeScript team i.e. the language creators e.g <code>SyntaxKind.StringLiteral</code>. Also helps with translation (code generation) of other languages into TypeScript.</p></blockquote><p><strong>Bad</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span></span>
<span class="line">    red</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Good</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span></span>
<span class="line">    Red</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="null-vs-undefined" tabindex="-1"><a class="header-anchor" href="#null-vs-undefined"><span>Null vs. Undefined</span></a></h2><ul><li>Prefer not to use either for explicit unavailability</li></ul><blockquote><p>Reason: these values are commonly used to keep a consistent structure between values. In TypeScript you use <em>types</em> to denote the structure</p></blockquote><p><strong>Bad</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>Good</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">let</span> foo<span class="token operator">:</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token operator">:</span><span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>Use <code>undefined</code> in general (do consider returning an object like <code>{valid:boolean, value?:Foo}</code> instead)</li></ul><p><strong>Bad</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>Good</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>Use <code>null</code> where it&#39;s a part of the API or conventional</li></ul><blockquote><p>Reason: It is conventional in Node.js e.g. <code>error</code> is <code>null</code> for NodeBack style callbacks.</p></blockquote><p><strong>Bad</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>Good</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>Use <em>truthy</em> check for <strong>objects</strong> being <code>null</code> or <code>undefined</code></li></ul><p><strong>Bad</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Good</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Use <code>== null</code> / <code>!= null</code> (not <code>===</code> / <code>!==</code>) to check for <code>null</code> / <code>undefined</code> on primitives as it works for both <code>null</code>/<code>undefined</code> but not other falsy values (like <code>&#39;&#39;</code>, <code>0</code>, <code>false</code>) e.g.</li></ul><p><strong>Bad</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  </span>
<span class="line"><span class="token punctuation">}</span> <span class="token comment">// does not rule out undefined</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Good</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  </span>
<span class="line"><span class="token punctuation">}</span> <span class="token comment">// rules out both null and undefined</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="formatting" tabindex="-1"><a class="header-anchor" href="#formatting"><span>Formatting</span></a></h2><p>The TypeScript compiler ships with a very nice formatting language service. Whatever output it gives by default is good enough to reduce the cognitive overload on the team.</p><p>Use <a href="https://github.com/vvakame/typescript-formatter" target="_blank" rel="noopener noreferrer"><code>tsfmt</code></a> to automatically format your code on the command line. Also, your IDE (atom/vscode/vs/sublime) already has formatting support built-in.</p><p>Examples:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token comment">// Space before type i.e. foo:&lt;space&gt;string</span></span>
<span class="line"><span class="token keyword">const</span> foo<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="quotes" tabindex="-1"><a class="header-anchor" href="#quotes"><span>Quotes</span></a></h2><ul><li>Prefer single quotes (<code>&#39;</code>) unless escaping.</li></ul><blockquote><p>Reason: More JavaScript teams do this (e.g. <a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener noreferrer">airbnb</a>, <a href="https://github.com/feross/standard" target="_blank" rel="noopener noreferrer">standard</a>, <a href="https://github.com/npm/npm" target="_blank" rel="noopener noreferrer">npm</a>, <a href="https://github.com/nodejs/node" target="_blank" rel="noopener noreferrer">node</a>, <a href="https://github.com/angular/angular/" target="_blank" rel="noopener noreferrer">google/angular</a>, <a href="https://github.com/facebook/react" target="_blank" rel="noopener noreferrer">facebook/react</a>). It&#39;s easier to type (no shift needed on most keyboards). <a href="https://github.com/prettier/prettier/issues/1105" target="_blank" rel="noopener noreferrer">Prettier team recommends single quotes as well</a></p></blockquote><blockquote><p>Double quotes are not without merit: Allows easier copy paste of objects into JSON. Allows people to use other languages to work without changing their quote character. Allows you to use apostrophes e.g. <code>He&#39;s not going.</code>. But I&#39;d rather not deviate from where the JS Community is fairly decided.</p></blockquote><ul><li>When you can&#39;t use double quotes, try using back ticks (\`).</li></ul><blockquote><p>Reason: These generally represent the intent of complex enough strings.</p></blockquote><h2 id="spaces" tabindex="-1"><a class="header-anchor" href="#spaces"><span>Spaces</span></a></h2><ul><li>Use <code>2</code> spaces. Not tabs.</li></ul><blockquote><p>Reason: More JavaScript teams do this (e.g. <a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener noreferrer">airbnb</a>, <a href="https://github.com/rwaldron/idiomatic.js" target="_blank" rel="noopener noreferrer">idiomatic</a>, <a href="https://github.com/feross/standard" target="_blank" rel="noopener noreferrer">standard</a>, <a href="https://github.com/npm/npm" target="_blank" rel="noopener noreferrer">npm</a>, <a href="https://github.com/nodejs/node" target="_blank" rel="noopener noreferrer">node</a>, <a href="https://github.com/angular/angular/" target="_blank" rel="noopener noreferrer">google/angular</a>, <a href="https://github.com/facebook/react" target="_blank" rel="noopener noreferrer">facebook/react</a>). The TypeScript/VSCode teams use 4 spaces but are definitely the exception in the ecosystem.</p></blockquote><h2 id="semicolons" tabindex="-1"><a class="header-anchor" href="#semicolons"><span>Semicolons</span></a></h2><ul><li>Use semicolons.</li></ul><blockquote><p>Reasons: Explicit semicolons helps language formatting tools give consistent results. Missing ASI (automatic semicolon insertion) can trip new devs e.g. <code>foo() \\n (function(){})</code> will be a single statement (not two). TC39 <a href="https://github.com/tc39/ecma262/pull/1062" target="_blank" rel="noopener noreferrer">warning on this as well</a>. Example teams: <a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener noreferrer">airbnb</a>, <a href="https://github.com/rwaldron/idiomatic.js" target="_blank" rel="noopener noreferrer">idiomatic</a>, <a href="https://github.com/angular/angular/" target="_blank" rel="noopener noreferrer">google/angular</a>, <a href="https://github.com/facebook/react" target="_blank" rel="noopener noreferrer">facebook/react</a>, <a href="https://github.com/Microsoft/TypeScript/" target="_blank" rel="noopener noreferrer">Microsoft/TypeScript</a>.</p></blockquote><h2 id="array" tabindex="-1"><a class="header-anchor" href="#array"><span>Array</span></a></h2><ul><li>Annotate arrays as <code>foos: Foo[]</code> instead of <code>foos: Array&lt;Foo&gt;</code>.</li></ul><blockquote><p>Reasons: It&#39;s easier to read. It&#39;s used by the TypeScript team. Makes easier to know something is an array as the mind is trained to detect <code>[]</code>.</p></blockquote><h2 id="filename" tabindex="-1"><a class="header-anchor" href="#filename"><span>Filename</span></a></h2><p>Name files with <code>camelCase</code>. E.g. <code>utils.ts</code>, <code>map.ts</code> etc.</p><blockquote><p>Reason: Conventional across many JS teams.</p></blockquote><p>When the file exports a component and your framework (like React) wants component to be PascalCased, use pascal case file name to match e.g. <code>Accordion.tsx</code>, <code>MyControl.tsx</code>.</p><blockquote><p>Reason: Helps with consistency (little overthought required) and its what the ecosystem is doing.</p></blockquote><h2 id="type-vs-interface" tabindex="-1"><a class="header-anchor" href="#type-vs-interface"><span>type vs. interface</span></a></h2><ul><li>Use <code>type</code> when you <em>might</em> need a union or intersection:</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">type Foo = number | { someProperty: number }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>Use <code>interface</code> when you want <code>extends</code> or <code>implements</code> e.g.</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">interface Foo {</span>
<span class="line">  foo: string;</span>
<span class="line">}</span>
<span class="line">interface FooBar extends Foo {</span>
<span class="line">  bar: string;</span>
<span class="line">}</span>
<span class="line">class X implements FooBar {</span>
<span class="line">  foo: string;</span>
<span class="line">  bar: string;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Otherwise, use whatever makes you happy that day. I use <a href="https://www.youtube.com/watch?v=IXAT3If0pGI" target="_blank" rel="noopener noreferrer">type</a></li></ul><h2 id="or" tabindex="-1"><a class="header-anchor" href="#or"><span><code>==</code> or <code>===</code></span></a></h2><p>Both are <a href="https://www.youtube.com/watch?v=vBhRXMDlA18" target="_blank" rel="noopener noreferrer">mostly safe for TypeScript users</a>. I use <code>===</code> as that is what is used in the TypeScript codebase.</p>`,121),i=[l];function o(r,c){return n(),s("div",null,i)}const d=e(t,[["render",o],["__file","ts-coding-convention.html.vue"]]),u=JSON.parse('{"path":"/convention/ts-coding-convention.html","title":"TypeScript Style Guide and Coding Conventions","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Variable and Function","slug":"variable-and-function","link":"#variable-and-function","children":[]},{"level":2,"title":"Class","slug":"class","link":"#class","children":[]},{"level":2,"title":"Interface","slug":"interface","link":"#interface","children":[]},{"level":2,"title":"Type","slug":"type","link":"#type","children":[]},{"level":2,"title":"Namespace","slug":"namespace","link":"#namespace","children":[]},{"level":2,"title":"Enum","slug":"enum","link":"#enum","children":[]},{"level":2,"title":"Null vs. Undefined","slug":"null-vs-undefined","link":"#null-vs-undefined","children":[]},{"level":2,"title":"Formatting","slug":"formatting","link":"#formatting","children":[]},{"level":2,"title":"Quotes","slug":"quotes","link":"#quotes","children":[]},{"level":2,"title":"Spaces","slug":"spaces","link":"#spaces","children":[]},{"level":2,"title":"Semicolons","slug":"semicolons","link":"#semicolons","children":[]},{"level":2,"title":"Array","slug":"array","link":"#array","children":[]},{"level":2,"title":"Filename","slug":"filename","link":"#filename","children":[]},{"level":2,"title":"type vs. interface","slug":"type-vs-interface","link":"#type-vs-interface","children":[]},{"level":2,"title":"== or ===","slug":"or","link":"#or","children":[]}],"git":{"updatedTime":1717823121000,"contributors":[{"name":"Lâm Ngọc Khương","email":"me@ngockhuong.com","commits":1}]},"filePathRelative":"convention/ts-coding-convention.md"}');export{d as comp,u as data};
